// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid()) @db.VarChar(36)
  email            String   @unique @db.VarChar(255)
  password         String?  @db.VarChar(64)
  name             String   @db.VarChar(128)
  phone            String?  @db.VarChar(32)
  oauthProvider    String?  @db.VarChar(32)
  status           Int      @default(1)
  role             UserRole @default(CUSTOMER)
  emailVerified    Boolean? @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  rooms            Room[]
  userReservations Reservation[] @relation("UserReservations")
  hostReservations Reservation[] @relation("HostReservations")
  billings         Billing[]     @relation("UserBillings")
}

model Location {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(100)
  parentId  Int?
  parent    Location?   @relation("LocationChildrens", fields: [parentId], references: [id], onDelete: SetNull)
  childrens Location[]  @relation("LocationChildrens")
  rooms     Room[]
}

model RoomType {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(60)
  icon  String
  rooms Room[]
}

model Room {
  id            BigInt    @id @default(autoincrement())
  title         String    @db.VarChar(200)
  description   String
  features      Json      @default("[]")
  price         Float
  days          Json      @default("[]")
  hours         Json      @default("[]")
  maxAttendance Int
  contactName   String?   @db.VarChar(64)
  contactPhone  String?   @db.VarChar(32)
  type          RoomType? @relation(fields: [typeId], references: [id], onDelete: SetNull)
  typeId        Int?
  location      Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  locationId    Int?
  userId        String?   @db.VarChar(36)
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  images        RoomImage[]
  reservations  Reservation[]
}

model RoomImage {
  id     BigInt @id @default(autoincrement())
  name   String
  roomId BigInt
  room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

model Reservation {
  id           BigInt            @id @default(autoincrement())
  reservedDate DateTime
  duration     Int
  status       ReservationStatus @default(PENDING)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  roomId       BigInt
  room         Room              @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String    @db.VarChar(36)
  user         User      @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId       String?   @db.VarChar(36)
  host         User?     @relation("HostReservations", fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  billing      Billing?
}

model Billing {
  id             BigInt         @id @default(autoincrement())
  amount         Float
  dueAt          DateTime
  status         BillingStatus  @default(PENDING)
  paymentMethod  String         @db.VarChar(32)
  paymentDetail  Json?
  paidAt         DateTime?
  declinedReason String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  reservationId  BigInt         @unique
  reservation    Reservation    @relation(fields: [reservationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String         @db.VarChar(36)
  user           User           @relation("UserBillings", fields: [userId], references: [id])
  hostId         String?        @db.VarChar(36)
}

model Bank {
  id          Int    @id @default(autoincrement())
  name        String @db.VarChar(100)
  accountNo   String @db.VarChar(100)
  accountName String @db.VarChar(100)
}

enum UserRole {
  ROOT
  ADMIN
  HOST
  CUSTOMER
}

enum ReservationStatus {
  PENDING
  BOOKED
  CHECKEDIN
  CHECKEDOUT
  CANCELED
}

enum BillingStatus {
  PENDING
  CONFIRMED
  PAID
  CANCELED
  DECLINED
}